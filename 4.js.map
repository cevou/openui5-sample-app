{"version":3,"sources":["webpack:///../node_modules/@openui5/sap.ui.core/src/sap/ui/core/service/ServiceFactoryRegistry.js","webpack:///../node_modules/@openui5/sap.ui.core/src/sap/ui/core/service/ServiceFactory.js","webpack:///../node_modules/@openui5/sap.ui.core/src/sap/ui/core/service/Service.js"],"names":["__WEBPACK_UI5_DEFINE_ARRAY__","__WEBPACK_UI5_DEFINE_RESULT__","__webpack_require__","undefined","ServiceFactory","assert","mServiceFactories","Object","create","ServiceFactoryRegistry","register","sServiceFactoryName","oServiceFactory","this","unregister","get","apply","exports","module","BaseObject","Service","extend","metadata","library","constructor","vService","fnService","_fnService","prototype","destroy","arguments","createInstance","oServiceContext","Promise","resolve","reject","Error","Log","abstract","scopeObject","scopeType","_oServiceContext","init","oServiceInfo","AnonymousService","sMember","match","warning","getInterface","oProxy","bind","getContext","exit"],"mappings":"6EAAA,IAAAA,EAAAC;;;;;GAOAD,EAAc,CAACE,EAAA,KAAoBA,EAAA,SAiFlCC,KAjFoDF,EACpD,SAAAG,EAAAC,GACD,aAIA,IAAAC,EAAAC,OAAAC,OAAA,MAaAC,EAAAF,OAAAC,OAAA,MA2DA,OA9CAC,EAAAC,SAAA,SAAAC,EAAAC,GAOA,OALAP,EAAAM,EAAA,4DACAN,EAAAO,aAAAR,EAAA,6EAEAE,EAAAK,GAAAC,EAEAC,MAcAJ,EAAAK,WAAA,SAAAH,GAMA,OAJAN,EAAAM,EAAA,mEAEAL,EAAAK,GAEAE,MAcAJ,EAAAM,IAAA,SAAAJ,GACA,OAAAL,EAAAK,IAIAF,GAGCO,MAAAC,EAAAjB,MAAAkB,EAAAD,QAAAhB,wBCxFD,IAAAD,EAAAC;;;;;GAOAD,EAAc,CAACE,EAAA,GAAsBA,EAAA,KAA+BA,EAAA,SA6InEC,KA7IqFF,EACrF,SAAAkB,EAAAC,EAAAf,GACD,aAkFA,IAAAD,EAAAe,EAAAE,OAAA,sCAEAC,SAAA,CACAC,QAAA,eAGAC,YAAA,SAAAC,GAEAN,EAAAH,MAAAH,MAEA,IAAAa,EAAA,iBAAAD,EAAAL,EAAAZ,OAAAiB,KAEApB,GAAAqB,MAAA,mBAAAA,EAAA,iFAEAb,KAAAc,WAAAD,KAwCA,OA5BAtB,EAAAwB,UAAAC,QAAA,WACAV,EAAAS,UAAAC,QAAAb,MAAAH,KAAAiB,kBACAjB,KAAAc,YAiBAvB,EAAAwB,UAAAG,eAAA,SAAAC,GACA,yBAAAnB,KAAAc,WACAM,QAAAC,QAAA,IAAArB,KAAAc,WAAAK,IAEAC,QAAAE,OAAA,IAAAC,MAAA,sKAKAhC,GAGCY,MAAAC,EAAAjB,MAAAkB,EAAAD,QAAAhB,wBCpJD,IAAAD,EAAAC;;;;;GAOAD,EAAc,CAACE,EAAA,GAAsBA,EAAA,GAAmBA,EAAA,SAqQvDC,KArQsEF,EACtE,SAAAkB,EAAAd,EAAAgC,GACD,aAuEA,IAAAjB,EAAAD,EAAAE,OAAA,+BAEAC,SAAA,CACAgB,UAAA,EACAf,QAAA,eAGAC,YAAA,SAAAQ,GAEAb,EAAAH,MAAAH,MAIAmB,IACA3B,EAAA,iBAAA2B,EAAAO,YAAA,gDACAlC,EAAA,iBAAA2B,EAAAQ,UAAA,+CAGA3B,KAAA4B,iBAAAT,EAGA,mBAAAnB,KAAA6B,MACA7B,KAAA6B,UAmKA,OA5HAtB,EAAAZ,OAAA,SAAAmC,GACA,IAAAC,EAAA,SAAAZ,GACA,QAAAa,KAAAF,EACAE,EAAAC,MAAA,+CAGAT,EAAAU,QAAA,cAAAF,EAAA,0EAFAhC,KAAAgC,GAAAF,EAAAE,GAKAzB,EAAAJ,MAAAH,KAAAiB,YAGA,OADAc,EAAAhB,UAAArB,OAAAC,OAAAY,EAAAQ,WACAgB,GAiBAxB,EAAAQ,UAAAoB,aAAA,WAEA,IAAAC,EAAA1C,OAAAC,OAAA,MACA,QAAAqC,KAAAhC,KAMAgC,EAAAC,MAAA,oFACA,mBAAAjC,KAAAgC,KACAI,EAAAJ,GAAAhC,KAAAgC,GAAAK,KAAArC,OAQA,OAHAA,KAAAmC,aAAA,WACA,OAAAC,GAEAA,GAmBA7B,EAAAQ,UAAAuB,WAAA,WACA,OAAAtC,KAAA4B,kBAWArB,EAAAQ,UAAAC,QAAA,WAGA,mBAAAhB,KAAAuC,MACAvC,KAAAuC,OAGAjC,EAAAS,UAAAC,QAAAb,MAAAH,KAAAiB,kBACAjB,KAAA4B,kBAqCArB,GAGCJ,MAAAC,EAAAjB,MAAAkB,EAAAD,QAAAhB","file":"4.js","sourcesContent":["/*!\n * OpenUI5\n * (c) Copyright 2009-2019 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n\n// Provides class sap.ui.core.service.ServiceFactoryRegistry\nsap.ui.define(['./ServiceFactory', \"sap/base/assert\"],\n\tfunction(ServiceFactory, assert) {\n\t\"use strict\";\n\n\n\t// map of service factories\n\tvar mServiceFactories = Object.create(null);\n\n\n\t/**\n\t * The service factory registry.\n\t *\n\t * @author SAP SE\n\t * @version 1.62.1\n\t * @alias sap.ui.core.service.ServiceFactoryRegistry\n\t * @private\n\t * @sap-restricted sap.ushell\n\t * @since 1.37.0\n\t */\n\tvar ServiceFactoryRegistry = Object.create(null);\n\n\n\t/**\n\t * Registers a service factory instance for the given name.\n\t *\n\t * @param {string} sServiceFactoryName Name of the service factory\n\t * @param {sap.ui.core.service.ServiceFactory} oServiceFactory Service factory instance\n\t * @return {sap.ui.core.service.ServiceFactoryRegistry} <code>this</code> to allow method chaining\n\t * @static\n\t * @private\n\t * @sap-restricted sap.ushell\n\t */\n\tServiceFactoryRegistry.register = function(sServiceFactoryName, oServiceFactory) {\n\n\t\tassert(sServiceFactoryName, \"sServiceFactoryName must not be empty, null or undefined\");\n\t\tassert(oServiceFactory instanceof ServiceFactory, \"oServiceFactory must be an instance of sap.ui.core.service.ServiceFactory\");\n\n\t\tmServiceFactories[sServiceFactoryName] = oServiceFactory;\n\n\t\treturn this;\n\n\t};\n\n\n\t/**\n\t * Unregisters a service factory instance for the given name.\n\t *\n\t * @param {string} sServiceFactoryName Name of the service factory\n\t * @return {sap.ui.core.service.ServiceFactoryRegistry} <code>this</code> to allow method chaining\n\t * @static\n\t * @private\n\t * @sap-restricted sap.ushell\n\t */\n\tServiceFactoryRegistry.unregister = function(sServiceFactoryName) {\n\n\t\tassert(sServiceFactoryName, \"sServiceFactoryName must not be empty, null or undefined\");\n\n\t\tdelete mServiceFactories[sServiceFactoryName];\n\n\t\treturn this;\n\n\t};\n\n\n\t/**\n\t * Returns the service factory instance for the given name.\n\t *\n\t * @param {string} sServiceFactoryName Name of the service factory\n\t * @return {sap.ui.core.service.ServiceFactory} Service factory instance\n\t * @static\n\t * @private\n\t * @sap-restricted sap.ushell\n\t */\n\tServiceFactoryRegistry.get = function(sServiceFactoryName) {\n\t\treturn mServiceFactories[sServiceFactoryName];\n\t};\n\n\n\treturn ServiceFactoryRegistry;\n\n\n}, /* bExport= */ true);","/*!\n * OpenUI5\n * (c) Copyright 2009-2019 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n\n// Provides class sap.ui.core.service.ServiceFactory\nsap.ui.define(['sap/ui/base/Object', 'sap/ui/core/service/Service', \"sap/base/assert\"],\n\tfunction(BaseObject, Service, assert) {\n\t\"use strict\";\n\n\n\t/**\n\t * Creates a service factory.\n\t * @param {function|object} [vService] A constructor function of a service or\n\t *          a structured object with information about the service which\n\t *          creates an anonymous service.\n\t *\n\t * @class\n\t * A service factory is used to create service instances for a specific context.\n\t * The service factory needs to be registered in a central\n\t * {@link sap.ui.core.service.ServiceFactoryRegistry service factory registry}.\n\t * Consumers of services require the service factory to create service instances.\n\t *\n\t * The service factory base class can be used in a generic way to act as a\n\t * factory for any service:\n\t * <pre>\n\t * sap.ui.require([\n\t *   \"sap/ui/core/service/ServiceFactoryRegistry\",\n\t *   \"sap/ui/core/service/ServiceFactory\",\n\t *   \"my/Service\"\n\t * ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\t *\n\t *   ServiceFactoryRegistry.register(new ServiceFactory(MService));\n\t *\n\t * });\n\t * </pre>\n\t *\n\t * Additionally a concrete service factory can be implemented by extending the\n\t * service factory base class if additional functionality is needed when\n\t * creating new instances for a specific context:\n\t * <pre>\n\t * sap.ui.define(\"my/ServiceFactory\", [\n\t *   \"sap/ui/core/service/ServiceFactoryRegistry\",\n\t *   \"sap/ui/core/service/ServiceFactory\",\n\t *   \"my/Service\"\n\t * ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\t *\n\t *   return ServiceFactory.extend(\"my.ServiceFactory\", {\n\t *     createInstance: function(oServiceContext) {\n\t *       return Promise.resolve(new MyService(oServiceContext));\n\t *     }\n\t *   });\n\t *\n\t * });\n\t * </pre>\n\t *\n\t * Another option for the usage of the service factory is to provide a\n\t * structured object with information about the service which will\n\t * create an anonymous service internally:\n\t * <pre>\n\t * sap.ui.define(\"my/ServiceFactory\", [\n\t *   \"sap/ui/core/service/ServiceFactoryRegistry\",\n\t *   \"sap/ui/core/service/ServiceFactory\",\n\t *   \"my/Service\"\n\t * ], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\t *\n\t *   return new ServiceFactory({\n\t *\n\t *     init: function() { ... },\n\t *     exit: function() { ... },\n\t *\n\t *     doSomething: function() { ... }\n\t *\n\t *   });\n\t *\n\t * });\n\t * </pre>\n\t *\n\t * As <code>createInstance</code> returns a <code>Promise</code> e.g. the\n\t * service module can also be loaded asynchronously and resolve once the\n\t * module has been loaded and instantiated.\n\t *\n\t * @extends sap.ui.base.Object\n\t * @author SAP SE\n\t * @version 1.62.1\n\t * @alias sap.ui.core.service.ServiceFactory\n\t * @private\n\t * @sap-restricted sap.ushell\n\t * @since 1.37.0\n\t */\n\tvar ServiceFactory = BaseObject.extend(\"sap.ui.core.service.ServiceFactory\", /** @lends sap.ui.service.ServiceFactory.prototype */ {\n\n\t\tmetadata: {\n\t\t\t\"library\" : \"sap.ui.core\" // UI Library that contains this class\n\t\t},\n\n\t\tconstructor : function(vService) {\n\n\t\t\tBaseObject.apply(this);\n\n\t\t\tvar fnService = typeof vService === \"object\" ? Service.create(vService) : vService;\n\n\t\t\tassert(!fnService || fnService && typeof fnService === \"function\", \"The service constructor either should be undefined or a constructor function!\");\n\n\t\t\tthis._fnService = fnService;\n\n\t\t}\n\n\t});\n\n\n\t/**\n\t * Lifecycle method to destroy the service factory instance.\n\t *\n\t * @protected\n\t */\n\tServiceFactory.prototype.destroy = function() {\n\t\tBaseObject.prototype.destroy.apply(this, arguments);\n\t\tdelete this._fnService;\n\t};\n\n\n\t/**\n\t * Creates a new instance of a service. When used as a generic service factory\n\t * by providing a service constructor function it will create a new service\n\t * instance otherwise the function will fail. For custom service factories\n\t * this function has to be overridden and should return a <code>Promise</code>.\n\t *\n\t * @param {object} oServiceContext Context for which the service is created\n\t * @param {object} oServiceContext.scopeObject Object that is in scope (e.g. component instance)\n\t * @param {string} oServiceContext.scopeType Type of object that is in scope (e.g. component, ...)\n\t * @param {string} oServiceContext.settings The service settings\n\t * @return {Promise} Promise which resolves with the new Service instance.\n\t * @protected\n\t */\n\tServiceFactory.prototype.createInstance = function(oServiceContext) {\n\t\tif (typeof this._fnService === \"function\") {\n\t\t\treturn Promise.resolve(new this._fnService(oServiceContext));\n\t\t} else {\n\t\t\treturn Promise.reject(new Error(\"Usage of sap.ui.core.service.ServiceFactory requires a service constructor function to create a new service instance or to override the createInstance function!\"));\n\t\t}\n\t};\n\n\n\treturn ServiceFactory;\n\n\n});","/*!\n * OpenUI5\n * (c) Copyright 2009-2019 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n\n// Provides class sap.ui.core.service.Service\nsap.ui.define(['sap/ui/base/Object', \"sap/base/assert\", \"sap/base/Log\"],\n\tfunction(BaseObject, assert, Log) {\n\t\"use strict\";\n\n\n\t/**\n\t * Creates a service for the given context.\n\t *\n\t * @param {object} oServiceContext Context for which the service is created\n\t * @param {object} oServiceContext.scopeObject Object that is in scope (e.g. component instance)\n\t * @param {string} oServiceContext.scopeType Type of object that is in scope (e.g. component, ...)\n\t *\n\t * @class\n\t * A service provides a specific functionality. A service instance can be obtained\n\t * by a {@link sap.ui.core.service.ServiceFactory ServiceFactory} or at a Component\n\t * via {@link sap.ui.core.Component#getService getService} function.\n\t *\n\t * This class is the abstract base class for services and needs to be extended:\n\t * <pre>\n\t * sap.ui.define(\"my/Service\", [\n\t *   \"sap/ui/core/service/Service\"\n\t * ], function(Service) {\n\t *\n\t *   return Service.extend(\"my.Service\", {\n\t *\n\t *     init: function() {\n\t *       // handle init lifecycle\n\t *     },\n\t *\n\t *     exit: function() {\n\t *       // handle exit lifecycle\n\t *     },\n\t *\n\t *     doSomething: function() {\n\t *       // some functionality\n\t *     }\n\t *\n\t *  });\n\t *\n\t * });\n\t * </pre>\n\t *\n\t * A service instance will have a service context:\n\t * <pre>\n\t * {\n\t *   \"scopeObject\": oComponent, // the Component instance\n\t *   \"scopeType\": \"component\"   // the stereotype of the scopeObject\n\t * }\n\t * </pre>\n\t *\n\t * The service context can be retrieved with the function <code>getContext</code>.\n\t * This function is private to the service instance and will not be exposed via\n\t * the service interface.\n\t *\n\t * For consumers of the service it is recommended to provide the service instance\n\t * only - as e.g. the {@link sap.ui.core.Component#getService getService} function\n\t * of the Component does. The service interface can be accessed via the\n\t * <code>getInterface</code> function.\n\t *\n\t * Other private functions of the service instance are the lifecycle functions.\n\t * Currently there are two lifecycle functions: <code>init</code> and <code>exit</code>.\n\t * In addition the <code>destroy</code> function will also by hidden to avoid\n\t * the control of the service lifecycle for service interface consumers.\n\t *\n\t * @extends sap.ui.base.Object\n\t * @author SAP SE\n\t * @version 1.62.1\n\t * @alias sap.ui.core.service.Service\n\t * @abstract\n\t * @private\n\t * @sap-restricted sap.ushell\n\t * @since 1.37.0\n\t */\n\tvar Service = BaseObject.extend(\"sap.ui.core.service.Service\", /** @lends sap.ui.service.Service.prototype */ {\n\n\t\tmetadata: {\n\t\t\t\"abstract\" : true,\n\t\t\t\"library\" : \"sap.ui.core\" // UI Library that contains this class\n\t\t},\n\n\t\tconstructor : function(oServiceContext) {\n\n\t\t\tBaseObject.apply(this);\n\n\t\t\t// Service context can either be undefined or null\n\t\t\t// or an object with the properties scopeObject and scopeType\n\t\t\tif (oServiceContext) {\n\t\t\t\tassert(typeof oServiceContext.scopeObject === \"object\", \"The service context requires a scope object!\");\n\t\t\t\tassert(typeof oServiceContext.scopeType === \"string\", \"The service context requires a scope type!\");\n\t\t\t}\n\n\t\t\tthis._oServiceContext = oServiceContext;\n\n\t\t\t// call the init lifecycle function\n\t\t\tif (typeof this.init === \"function\") {\n\t\t\t\tthis.init();\n\t\t\t}\n\n\t\t}\n\n\t});\n\n\n\t/**\n\t * Creates an anonymous service for the provided structured object with\n\t * service information. It allows to define an anonymous service without\n\t * extending it as follows:\n\t * <pre>\n\t * sap.ui.require([\n\t *   \"sap/ui/core/service/Service\"\n\t * ], function(Service) {\n\t *\n\t *   var oAnonymousService = Service.create({\n\t *\n\t *     init: function() { ... },\n\t *     exit: function() { ... },\n\t *\n\t *     doSomething: function() { ... }\n\t *\n\t *  });\n\t *\n\t * });\n\t * </pre>\n\t *\n\t * The anonymous service is defined as object literal and must not implement\n\t * members called <code>metadata</code>, <code>constructor</code>,\n\t * <code>getContext</code> or <code>destroy</code>. Those members will be\n\t * ignored and not applied to the service instance. A warning will be\n\t * reported in the log.\n\t *\n\t * @param {object} oServiceInfo Structured object with information about the service\n\t * @return {function} function to create a new anonymous service instance\n\t * @private\n\t */\n\tService.create = function(oServiceInfo) {\n\t\tvar AnonymousService = function AnonymousService(oServiceContext) {\n\t\t\tfor (var sMember in oServiceInfo) {\n\t\t\t\tif (!sMember.match(/^(metadata|constructor|getContext|destroy)$/)) {\n\t\t\t\t\tthis[sMember] = oServiceInfo[sMember];\n\t\t\t\t} else {\n\t\t\t\t\tLog.warning(\"The member \" + sMember + \" is not allowed for anonymous service declaration and will be ignored!\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tService.apply(this, arguments);\n\t\t};\n\t\tAnonymousService.prototype = Object.create(Service.prototype);\n\t\treturn AnonymousService;\n\t};\n\n\n\t/**\n\t * Returns the public interface of the service. By default, this filters the\n\t * internal functions like <code>getInterface</code>, <code>getContext</code>\n\t * and all other functions starting with \"_\". Additionally the lifecycle\n\t * functions <code>init</code>, <code>exit</code> and <code>destroy</code>\n\t * will be filtered for the service interface. This function can be\n\t * overridden in order to self-create a service interface.\n\t *\n\t * This function is not available on the service interface.\n\t *\n\t * @return {object} the public interface of the service\n\t * @protected\n\t */\n\tService.prototype.getInterface = function() {\n\t\t// create a proxy object (interface)\n\t\tvar oProxy = Object.create(null);\n\t\tfor (var sMember in this) {\n\t\t\t// filter out internal functions:\n\t\t\t//  - metadata, constructor, getInterface, getContext\n\t\t\t//  - functions starting with \"_\"\n\t\t\t// or lifecycle functions:\n\t\t\t//  - destroy, init, exit\n\t\t\tif (!sMember.match(/^_|^metadata$|^constructor$|^getInterface$|^destroy$|^init$|^exit$|^getContext$/) &&\n\t\t\t\ttypeof this[sMember] === \"function\") {\n\t\t\t\toProxy[sMember] = this[sMember].bind(this);\n\t\t\t}\n\t\t}\n\t\t// override the getInterface function to avoid the\n\t\t// creation of yet another proxy/interface object again\n\t\tthis.getInterface = function() {\n\t\t\treturn oProxy;\n\t\t};\n\t\treturn oProxy;\n\t};\n\n\n\t/**\n\t * Returns the context of the service:\n\t * <pre>\n\t * {\n\t *   \"scopeObject\": oComponent, // the Component instance\n\t *   \"scopeType\": \"component\",   // the stereotype of the scopeObject\n\t *   \"settings\": {} // the provided service settings\n\t * }\n\t * </pre>\n\t *\n\t * This function is not available on the service interface.\n\t *\n\t * @return {object} the context of the service\n\t * @protected\n\t */\n\tService.prototype.getContext = function() {\n\t\treturn this._oServiceContext;\n\t};\n\n\n\t/**\n\t * Lifecycle method to destroy the service instance.\n\t *\n\t * This function is not available on the service interface.\n\t *\n\t * @protected\n\t */\n\tService.prototype.destroy = function() {\n\n\t\t// call the exit lifecycle function\n\t\tif (typeof this.exit === \"function\") {\n\t\t\tthis.exit();\n\t\t}\n\n\t\tBaseObject.prototype.destroy.apply(this, arguments);\n\t\tdelete this._oServiceContext;\n\n\t};\n\n\n\t/**\n\t * Initializes the service instance after creation.\n\t *\n\t * Applications must not call this hook method directly, it is called by the\n\t * framework while the constructor of a service is executed.\n\t *\n\t * Subclasses of service should override this hook to implement any necessary\n\t * initialization.\n\t *\n\t * @function\n\t * @name sap.ui.core.service.Service.prototype.init\n\t * @protected\n\t */\n\t//Service.prototype.init = function() {};\n\n\n\t/**\n\t * Cleans up the service instance before destruction.\n\t *\n\t * Applications must not call this hook method directly, it is called by the\n\t * framework when the service is {@link #destroy destroyed}.\n\t *\n\t * Subclasses of service should override this hook to implement any necessary\n\t * clean-up.\n\t *\n\t * @function\n\t * @name sap.ui.core.service.Service.prototype.exit\n\t * @protected\n\t */\n\t//Service.prototype.exit = function() {};\n\n\n\treturn Service;\n\n\n});"],"sourceRoot":""}